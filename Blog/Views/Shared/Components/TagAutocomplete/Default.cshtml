@model Blog.Component.TagAutocompleteComponentModel
@{
    var sourceForAutocomplete = string.Empty;
    sourceForAutocomplete += "[";
    foreach (var tag in Model.AllTags)
    {
        sourceForAutocomplete += $"'{tag}',";
    }
    sourceForAutocomplete += "]";
}
<div class="row">
    <div class="col-md-6">
        <div class="ui-widget">
            <label for="Tags">Tags: </label>
            <input id="Tags" size="50" value="@Model.AddedTags">
        </div>
    </div>
    <div class="col-md-6">
        <ul>
            @foreach (var tag in Model.AllTags)
            {
                <li>@tag</li>
            }
        </ul>
    </div>
</div>
    
<script>
    $(function () {
        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }
        var availableTags = @Html.Raw(sourceForAutocomplete);
        $("#Tags")
            // don't navigate away from the field on tab when selecting an item
            .on("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).autocomplete("instance").menu.active) {
                    event.preventDefault();
                }
            })
            .autocomplete({
                source:function( request, response ) {
                    // delegate back to autocomplete, but extract the last term
                    response( $.ui.autocomplete.filter(
                        availableTags, extractLast( request.term ) ) );
                },
            search: function () {
                // custom minLength
                var term = extractLast(this.value);
                if (term.length < 2) {
                    return false;
                }
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var terms = split(this.value);
                // remove the current input
                terms.pop();
                // add the selected item
                terms.push(ui.item.value);
                // add placeholder to get the comma-and-space at the end
                terms.push("");
                this.value = terms.join(", ");
                return false;
            }
            });
    });
</script>
